project.ext {

    isModuleDebug = false //是否是debug模块单独调试模式

    //读取compile.properties配置信息
    Properties properties = new Properties()
    properties.load(project.rootProject.file('compile.properties').newDataInputStream())
    //依赖配置
    libs = rootProject.ext.libs
    apts = rootProject.ext.apts
    compileSdkVersion = Integer.valueOf(properties.getProperty('compileSdkVersion'))
    buildToolsVersion = properties.getProperty("buildToolsVersion")
    applicationId = properties.getProperty("applicationId")
    minSdkVersion = Integer.valueOf(properties.getProperty('minSdkVersion'))
    targetSdkVersion = Integer.valueOf(properties.getProperty('targetSdkVersion'))
    versionCode = Integer.valueOf(properties.getProperty('versionCode'))
    versionName = properties.getProperty('versionName')

    //设置Application配置--(当组件单独立调试时走这里的配置)
    setAppDefaultConfig = {
        project ->
            project.apply plugin: "com.android.application" //配置application(应用级)
            project.apply plugin: "dagger.hilt.android.plugin"//hilt注入插件
            setAndroidConfig project.android //配置android节点
            setDependencies project.dependencies //配置依赖
    }
    //设置Library配置--(当组件做为Library被依赖时走这里的配置)
    setLibDefaultConfig = {
        project.apply plugin: "com.android.library"  //配置library(依赖库级)
        project.apply plugin: "dagger.hilt.android.plugin"//hilt注入插件
        project.apply plugin: "com.jakewharton.butterknife"
        setAndroidConfig project.android  //配置android节点
        setDependencies project.dependencies //配置依赖
    }

    //设置android节点配置
    setAndroidConfig = {
        android ->
            android.compileSdkVersion project.compileSdkVersion
            android.buildToolsVersion project.buildToolsVersion
            android.defaultConfig {
                minSdkVersion project.minSdkVersion
                targetSdkVersion project.targetSdkVersion
                versionCode project.versionCode
                versionName project.versionName
                multiDexEnabled true  //分包
                if(project.name == "app"){
                    applicationId project.applicationId
                }
                //其他工程配置与主工程applicationId区分
                if (project.isModuleDebug && project.name != "framework") {
                    //调试模式下的module使用applicationId+模块名 防止applicationId冲突
                    applicationId project.applicationId
                    applicationIdSuffix = project.name
                }
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                //ndk支持 手机+模拟器
                ndk {
                    abiFilters "armeabi-v7a", "arm64-v8a" ,"x86"
                }
                javaCompileOptions {
                    annotationProcessorOptions {
                        // 路由每个模块的名称
                        arguments += [AROUTER_MODULE_NAME: project.name]
                    }
                }
            }

            //JDK版本
            android.compileOptions {
                sourceCompatibility JavaVersion.VERSION_11
                targetCompatibility JavaVersion.VERSION_11
            }

            //动态配置AndroidManifest--联调/Debug运行模式
            android.sourceSets {
                main {
                    //只处理module模块
                    if (project.name != "app" && project.name != "framework") {
                        if (project.isModuleDebug) {
                            manifest.srcFile "src/main/debug/AndroidManifest.xml"
                        } else {
                            manifest.srcFile "src/main/AndroidManifest.xml"
                        }
                    }
                }
            }

            //统一一个维度产品风味
            android.flavorDimensions "default"

            //设置产品风味
            android.productFlavors {
                //开发环境
                envDevelop {
                    //全局根服务器地址
                    buildConfigField "String", "NET_BASE_URL", NET_DEV_BASE_URL
                    //网络请求错误标识
                    buildConfigField "String", "REQUEST_ERROR_TAG", REQUEST_ERROR_TAG
                    //英文工程根文件名
                    buildConfigField "String", "PROJECT_NAME", PROJECT_NAME
                    //给非主工程(app模块工程)string.xml文件添加 app_name字符串
                    if (project.name != "app") {
                        resValue "string", "app_name", PROJECT_NAME.replace("\"","")+"_DEV_${project.name}"
                    }
                    //是否加密
                    buildConfigField "Boolean", "ISENCRYPTION", IS_DEV_ENCRYPTION
                    //是否开启全局异常拦截
                    buildConfigField "Boolean", "CRASH_SWITCH", CRASH_SWITCH_DEV
                    //是否开启日志
                    buildConfigField "Boolean", "LOG_SWITCH", LOG_SWITCH_DEV
                    //给AndroidManifest.xml添加属性
                    manifestPlaceholders = [
                            app_name: project.hasProperty('devOpsTaskId') ? devOpsTaskId + "_Dev" :  "${PROJECT_NAME.replace("\"","")}_Dev", //用于生成Apk文件时的文件名前缀
                    ]
                }
                //内测环境
                envTest {
                    buildConfigField "String", "NET_BASE_URL", NET_TEST_BASE_URL
                    buildConfigField "String", "REQUEST_ERROR_TAG", REQUEST_ERROR_TAG
                    buildConfigField "String", "PROJECT_NAME", PROJECT_NAME
                    if (project.name != "app") {
                        resValue "string", "app_name", PROJECT_NAME.replace("\"","")+"_Test_${project.name}"
                    }
                    buildConfigField "Boolean", "ISENCRYPTION", IS_TEST_ENCRYPTION
                    buildConfigField "Boolean", "CRASH_SWITCH", CRASH_SWITCH_TEST
                    buildConfigField "Boolean", "LOG_SWITCH", LOG_SWITCH_TEST
                    manifestPlaceholders = [
                            app_name: project.hasProperty('devOpsTaskId') ? devOpsTaskId + "_Test" :  "${PROJECT_NAME.replace("\"","")}_Test",
                    ]
                }
                //公试环境
                envPTest {
                    buildConfigField "String", "NET_BASE_URL", NET_PTEST_BASE_URL
                    buildConfigField "String", "REQUEST_ERROR_TAG", REQUEST_ERROR_TAG
                    buildConfigField "String", "PROJECT_NAME", PROJECT_NAME
                    if (project.name != "app") {
                        resValue "string", "app_name", PROJECT_NAME.replace("\"","")+"_Test_${project.name}"
                    }
                    buildConfigField "Boolean", "ISENCRYPTION", IS_PTEST_ENCRYPTION
                    buildConfigField "Boolean", "CRASH_SWITCH", CRASH_SWITCH_PTEST
                    buildConfigField "Boolean", "LOG_SWITCH", LOG_SWITCH_PTEST
                    manifestPlaceholders = [
                            app_name: project.hasProperty('devOpsTaskId') ? devOpsTaskId + "_PTest" :  "${PROJECT_NAME.replace("\"","")}_PTest",
                    ]
                }
                //生产环境
                envProduct {
                    buildConfigField "String", "NET_BASE_URL", NET_PRODUCTION_BASE_URL
                    buildConfigField "String", "REQUEST_ERROR_TAG", REQUEST_ERROR_TAG
                    buildConfigField "String", "PROJECT_NAME", PROJECT_NAME
                    if (project.name != "app") {
                        resValue "string", "app_name", PROJECT_NAME.replace("\"","")+"_Pro_${project.name}"
                    }
                    buildConfigField "Boolean", "ISENCRYPTION", IS_PRODUCTION_ENCRYPTION
                    buildConfigField "Boolean", "CRASH_SWITCH", CRASH_SWITCH_PRODUCTION
                    buildConfigField "Boolean", "LOG_SWITCH", LOG_SWITCH_PRODUCTION
                    manifestPlaceholders = [
                            app_name:project.hasProperty('devOpsTaskId') ? devOpsTaskId  :  "${PROJECT_NAME.replace("\"","")}_Product",
                    ]
                }
            }
    }
    //设置依赖配置
    setDependencies = {
        dependencies ->
            delegate = dependencies
            //添加jar/aar依赖
            implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
            //添加所有第三方依赖--(系统会自动去重,使用implementation比api传递查询效率更高)
            //缺点 在子module调试时会将没用的依赖库打包到子module中 但是无所谓 并没有什么太大影响
            project.libs.each {
                k, v ->
                    implementation v
            }
            project.apts.each {
                k, v ->
                    annotationProcessor v
            }
            testImplementation 'junit:junit:4.+'
            androidTestImplementation 'androidx.test.ext:junit:1.1.2'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    }
}

//主工程/单独调试模式--配置为application应用级别
if ((project.name == "app" || isModuleDebug) && project.name != "framework") {
    project.setAppDefaultConfig project
} else {
//非单独调试模式做为依赖库配置
    project.setLibDefaultConfig project
}
